// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name SpringchatCoreFramework
import AVFoundation
import AVKit
import AdSupport
import Alamofire
import Chatto
import CoreGraphics
import DGCharts
import DeveloperToolsSupport
import Foundation
import Lottie
import MetalKit
import Mixpanel
import Nuke
import PhoneNumberKit
import PopupDialog
import Promise
import QuartzCore
import RevenueCat
import SceneKit
import SnapKit
import SocketIO
@_exported import SpringchatCoreFramework
import StoreKit
import Swift
import SwiftCSV
import SwiftUI
import SwiftyGif
import SystemConfiguration
import ThirdParty
import Toaster
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SCCMainViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) open var videoViewController: UIKit.UIViewController!
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SCCManager {
  public static let shared: SpringchatCoreFramework.SCCManager
  final public var isInnerMode: Swift.Bool {
    get
  }
  final public func initialize(prod: Swift.Bool = true, viewMode: SpringchatCoreFramework.SCCViewMode = .inner, consumerConfigure: SpringchatCoreFramework.SCCConsumerConfigure? = nil, purchasesConfigure: SpringchatCoreFramework.SCCPurchasesConfigure? = nil)
  @objc deinit
}
public enum SCCViewMode {
  case inner, tab
  public static func == (a: SpringchatCoreFramework.SCCViewMode, b: SpringchatCoreFramework.SCCViewMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SCCConsumerConfigure {
  public var id: Swift.String
  public var key: Swift.String
  public init(id: Swift.String = "", key: Swift.String = "")
}
public struct SCCPurchasesConfigure {
  public var publicAPIKey: Swift.String
  public var appUserID: Swift.String?
  public init(publicAPIKey: Swift.String = "", appUserID: Swift.String? = nil)
}
public struct SCCConfigure {
  public var prod: Swift.Bool
  public var viewMode: SpringchatCoreFramework.SCCViewMode
  public var consumerConfigure: SpringchatCoreFramework.SCCConsumerConfigure?
  public var purchasesConfigure: SpringchatCoreFramework.SCCPurchasesConfigure?
}
@IBDesignable extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
@IBDesignable extension UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
@IBDesignable extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
@IBDesignable extension UIKit.UINavigationItem {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
@IBDesignable extension UIKit.UITabBarItem {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
extension UIKit.UIBarButtonItem {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
@IBDesignable extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
@IBDesignable extension UIKit.UISearchBar {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
}
extension SpringchatCoreFramework.SCCViewMode : Swift.Equatable {}
extension SpringchatCoreFramework.SCCViewMode : Swift.Hashable {}
